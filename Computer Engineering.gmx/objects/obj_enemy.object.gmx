<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
hp = 40;
global.shoot = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AI Basic

if(distance_to_point(obj_player.x, obj_player.y) &lt;= 400 &amp;&amp; distance_to_point(obj_player.x, obj_player.y) &gt;= 100){
    if(!collision_line(x, y, obj_player.x, obj_player.y, obj_wall, false, true)){
         mp_potential_step(obj_player.x, obj_player.y, 4, false);
        global.shoot = floor(random(20))+1;
        if(global.shoot == 1){
            instance_create(x, y, obj_enemyBullet);
        }
    }
}else if(distance_to_point(obj_player.x, obj_player.y) &lt;= 100){
    if(!collision_line(x, y, obj_player.x, obj_player.y, obj_wall, false, true)){
          global.shoot = floor(random(30))+1;
        if(global.shoot == 1){
            instance_create(x, y, obj_enemyBullet);
        }
    }
}

/*
if(instance_exists(obj_player)){
    if(distance_to_point(obj_player.x, obj_player.y) &lt;= 333 &amp;&amp; distance_to_point(obj_player.x, obj_player.y) &gt;=70){
        mp_potential_step(obj_player.x, obj_player.y, 4, false);
        global.shoot = floor(random(20))+1;
        if(global.shoot == 1){
            instance_create(x, y, obj_enemyBullet);
        }
    }else if(distance_to_point(obj_player.x, obj_player.y) &lt;= 71){
       global.shoot = floor(random(20))+1;
        if(global.shoot == 1){
            instance_create(x, y, obj_enemyBullet);
        } 
    }
}


if(instance_exists(obj_player)){
    if(distance_to_point(obj_player.x, obj_player.y) &lt;= 200 &amp;&amp; distance_to_point(obj_player.x, obj_player.y) &gt;= 50 &amp;&amp; !collision_line(x, y, obj_player.x, obj_player.y, obj_wall, false, true)){
        phy_rotation = -point_direction(x, y, obj_player.x, obj_player.y)+90;
        ldx = lengthdir_x(44, -phy_rotation+90);
        ldy = lengthdir_y(44, -phy_rotation+90);
        physics_apply_force(x, y, ldx, ldy);
        global.shoot = floor(random(20))+1;
        if(global.shoot == 1){
            instance_create(x, y, obj_enemyBullet);
        }
    }else if(distance_to_point(obj_player.x, obj_player.y) &lt;= 50){
        //friction = 1;
        global.shoot = floor(random(20))+1;
        if(global.shoot == 1){
            instance_create(x, y, obj_enemyBullet);
        }
    }else{
        
    }
}

if(instance_exists(obj_player)){
    if(distance_to_point(obj_player.x, obj_player.y) &lt;= 200 &amp;&amp; !collision_line(x, y, obj_player.x, obj_player.y, obj_wall, false, true)){
        direction = point_direction(x, y, obj_player.x, obj_player.y)+90;
        speed += 0.5;
        if(speed &gt;= 5){
            speed = 4;
        }
        global.shoot = floor(random(20))+1;
        if(global.shoot == 1){
            instance_create(x, y, obj_enemyBullet);
        }
        image_angle = point_direction(x, y, obj_player.x, obj_player.y);
    }else{
        image_angle += 5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Taking Damage

hp -= 10;

if(hp &lt;= 0){
    obj_levelController.Exp += 10;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
